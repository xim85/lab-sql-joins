-- Active: 1721290976752@@127.0.0.1@3306@sakila
USE sakila;

-- List the number of films per category --

SELECT c.name, COUNT(f.film_id) AS "Number of films"
FROM category AS c
JOIN film_category AS f
ON c.category_id = f.category_id
GROUP BY c.name;



--Retrieve the store ID, city, and country for each store--

SELECT s.store_id, c.city, co.country
FROM store AS s
JOIN address AS a
ON s.address_id = a.address_id
JOIN city AS c
ON a.city_id = c.city_id
JOIN country AS co
ON c.country_id = co.country_id;


-- Calculate the total revenue generated by each store in dollars --
SELECT store.store_id, SUM(payment.amount) AS total_revenue
FROM store
JOIN staff 
ON store.store_id = staff.store_id
JOIN payment 
ON staff.staff_id = payment.staff_id
GROUP BY store.store_id;

-- Determine the average running time of films for each category --

SELECT ROUND(AVG(f.length),2), c.name
FROM film_category AS fc
JOIN category AS c
ON c.category_id = fc.category_id
JOIN film AS f
ON fc.film_id = f.film_id
GROUP BY c.name;

--Bonus:

--Identify the film categories with the longest average running time--

SELECT c.name AS category_name, ROUND(AVG(f.length), 2) AS average_running_time
FROM film_category AS fc
JOIN category AS c 
ON c.category_id = fc.category_id
JOIN film AS f 
ON fc.film_id = f.film_id
GROUP BY c.name;

-- Display the top 10 most frequently rented movies in descending order.--
SELECT film.title, COUNT(rental.rental_id) AS rental_count
FROM film
JOIN inventory 
ON film.film_id = inventory.film_id
JOIN rental 
ON inventory.inventory_id = rental.inventory_id
GROUP BY film.film_id
ORDER BY rental_count DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.--
SELECT f.title, s.store_id AS Can_be_rented
FROM film AS f
JOIN inventory AS i
ON f.film_id = i.film_id
JOIN store AS s
ON i.store_id = s.store_id
WHERE f.title = 'Academy Dinosaur'
    AND s.store_id = 1;


-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
--Include a column indicating whether each title is 'Available' or 'NOT available.' 
--Note that there are 42 titles that are not in the inventory, 
--and this information can be obtained using a CASE statement combined with IFNULL."

SELECT f.title,
    CASE
        WHEN COUNT(i.film_id) > 0 THEN 'Available'
        ELSE 'NOT available'
    END AS availability_status
FROM film AS f
LEFT JOIN inventory AS i ON f.film_id = i.film_id
GROUP BY f.title;


